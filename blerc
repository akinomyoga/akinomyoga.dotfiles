# blerc -*- mode: sh; mode: sh-bash -*-
# Settings for ble.sh (https://github.com/akinomyoga/ble.sh)

shopt -u no_empty_cmd_completion
((_ble_bash>=50000)) && shopt -s progcomp_alias

set -o vi
#bleopt char_width_{mode=emacs,version=13.0}
bleopt emoji_width=
bleopt indent_offset=2
bleopt decode_isolated_esc=esc
bleopt complete_auto_delay=1
bleopt editor='emacs -nw'
bleopt line_limit_type=editor

if ((_ble_version<400)); then
  ((_ble_bash>=40100)) && bind 'set skip-completed-text on'
  ((_ble_bash>=40300)) && bind 'set colored-stats on'
  ((_ble_bash>=40400)) && bind 'set colored-completion-prefix on'
fi

bleopt vbell_align=right
bleopt edit_vbell=1

bleopt menu_linewise_prefix=$' \e[1;32m>\e[m '

[[ $TERM == screen-256color ]] &&
  bleopt term_true_colors=

if ((_ble_version<400)); then
  function blehook/eval-after-load {
    local hook=_ble_${1}_load_hook
    ble/array#push "$hook" "$2"
  }
fi

function blerc/vim-load-hook {
  bind 'set keyseq-timeout 1'

  case $TERM in
  (xterm*)
    _ble_term_Ss=$'\e[@1 q' ;;
  esac

  ble-bind -m vi_nmap --cursor 2
  ble-bind -m vi_imap --cursor 0
  ble-bind -m vi_omap --cursor 4
  ble-bind -m vi_xmap --cursor 2
  ble-bind -m vi_cmap --cursor 5

  ble-import vim-surround
  bleopt vim_surround_q:=\'
  bleopt vim_surround_Q:=\"

  # C-w
  ble-bind -m vi_imap -f C-w 'kill-region-or kill-uword'
  ble-bind -m vi_imap -f M-w 'copy-region-or copy-uword'
  ble-bind -m vi_cmap -f C-w 'kill-region-or kill-uword'
  ble-bind -m vi_cmap -f M-w 'copy-region-or copy-uword'

  ble-bind -m vi_imap -f 'C-o' 'accept-and-next'

  ble-decode/keymap:vi_imap/define-meta-bindings

  bleopt keymap_vi_imap_undo=more

  ble-import keymap/vi_test

  bleopt keymap_vi_mode_name_{insert=挿入,replace=置換,vreplace=仮想置換}
  bleopt keymap_vi_mode_name_{visual=ビジュアル,select=選択}
  bleopt keymap_vi_mode_name_{linewise=行,blockwise=矩形}

  # # test arpeggio
  # source "$_ble_base/lib/vim-arpeggio.sh"
  # bleopt vim_arpeggio_timeoutlen=40
  # ble/lib/vim-arpeggio.sh/bind -f jk vi_imap/normal-mode

  #if [[ $OSTYPE != cygwin* && $OSTYPE != msys* && $OSTYPE != haiku* ]]; then
  if [[ $HOSTNAME == chatoyancy ]]; then
    ble-import vim-airline
    bleopt vim_airline_left_sep='▶'
    bleopt vim_airline_left_alt_sep='>'
    bleopt vim_airline_right_sep='◀'
    bleopt vim_airline_right_alt_sep='<'
    bleopt vim_airline_symbol_branch='#'
    bleopt vim_airline_theme=light
    bleopt keymap_vi_mode_show=1
  fi
}
blehook/eval-after-load keymap_vi blerc/vim-load-hook

function blerc/complete-load-hook {
  [[ $OSTYPE == cygwin ]] &&
    ble-sabbrev '\I'='| iconv -c -f cp932 -t utf-8'

  # sabbrev \branch
  function blerc/sabbrev-git-branch {
    ble/util/assign-array COMPREPLY "git branch | sed 's/^\*\{0,1\}[[:space:]]*//'" 2>/dev/null
  }
  ble-sabbrev -m '\branch'=blerc/sabbrev-git-branch

  # sabbrev \date
  ble-sabbrev -m '\date'='ble/util/assign COMPREPLY "date +%F"'

  # sabbrev \commit
  ble/color/defface blerc_git_commit_id fg=navy
  ble/complete/action/inherit-from blerc_git_commit_id word
  function ble/complete/action:blerc_git_commit_id/init-menu-item {
    local ret
    ble/color/face2g blerc_git_commit_id
    g=$ret
  }
  function blerc/sabbrev-git-commit {
    bleopt sabbrev_menu_style=desc-raw
    bleopt sabbrev_menu_opts=enter_menu

    local format=$'%h \e[1;32m(%ar)\e[m %s - \e[4m%an\e[m\e[1;33m%d\e[m'
    local arr; ble/util/assign-array arr 'git log --pretty=format:"$format"' &>/dev/null
    local line hash subject
    for line in "${arr[@]}"; do
      builtin read hash subject <<< "$line"
      ble/complete/cand/yield blerc_git_commit_id "$hash" "$subject"
    done
  }
  ble-sabbrev -m '\commit'='blerc/sabbrev-git-commit'
}
blehook/eval-after-load complete blerc/complete-load-hook

# Sample
#
# ble-bind -m isearch -f 'C-[' isearch/cancel
# ble-bind -m isearch -f 'ESC' isearch/cancel
# ble-bind -m lastarg -f 'C-[' lastarg/cancel
# ble-bind -m lastarg -f 'ESC' lastarg/cancel
# function blerc/complete-load.hook {
#   ble-bind -m auto_complete -f 'C-[' auto_complete/cancel
#   ble-bind -m auto_complete -f 'ESC' auto_complete/cancel
#   ble-bind -m menu_complete -f 'C-[' menu_complete/cancel
#   ble-bind -m menu_complete -f 'ESC' menu_complete/cancel
#   ble-bind -m dabbrev       -f 'C-[' dabbrev/cancel
#   ble-bind -m dabbrev       -f 'ESC' dabbrev/cancel
# }
# blehook/eval-after-load complete blerc/complete-load.hook

#------------------------------------------------------------------------------
# C-x q

## 関数 ble/widget/xword.locate-backward.1 index
##   @param[in] index
##   @var[out] ret
function ble/widget/xword.locate-backward.1 {
  local index=$1
  if ble/syntax/completion-context/.search-last-istat "$((index-1))"; then
    local istat=$ret stat wlen
    ble/string#split-words stat "${_ble_syntax_stat[istat]}"
    if (((wlen=stat[1])>=0)); then
      ((ret=istat-wlen))
      return 0
    fi

    local rex='^[^()<>|&:;$_ble_term_IFS]'
    if ((_ble_syntax_bash_command_BeginCtx[stat[0]])) &&
         [[ ${_ble_edit_str:istat} =~ $rex ]]; then
      ((ret=istat))
      return 0
    fi
  fi
  ret=-1
  return 1
}
function ble/widget/quote-xword {
  [[ $_ble_edit_str ]] || return

  local ret
  ble/widget/xword.locate-backward.1 "$_ble_edit_ind"
  local beg=$ret end=$_ble_edit_ind
  ((beg>=0)) || return
  local ins=${_ble_edit_str:beg:end-beg} q=\' Q="'\''"
  ins="'${ins//$q/$Q}'"

  ble-edit/content/replace "$beg" "$end" "$ins"
  ((_ble_edit_ind=beg+${#ins}-1,
    _ble_edit_mark>${#_ble_edit_str}&&(
      _ble_edit_mark=${#_ble_edit_str})))
  return 0
}
ble-bind -f 'C-x q' quote-xword

#------------------------------------------------------------------------------
# for debugging

bleopt internal_stackdump_enabled=1
bleopt decode_error_cseq_vbell=1 # for debugging
function ble/widget/debug/toggle-debug-switch {
  if [[ $bleopt_syntax_debug ]]; then
    bleopt syntax_debug=
  else
    bleopt syntax_debug=1
  fi
}
function blerc/debug/print-undo-history {
  printf '%s\n' "${_ble_edit_undo[@]}"
}
ble-bind -m vi_imap -f 'f11' debug/toggle-debug-switch
ble-bind -m vi_nmap -f 'f11' debug/toggle-debug-switch
ble-bind -m vi_imap -c 'f12' blerc/debug/print-undo-history
ble-bind -m vi_nmap -c 'f12' blerc/debug/print-undo-history

# 各関数の時間計測
_blerc_debug_timestamp_logfile=~/debug.txt
function blerc/debug/timestamp/args.advice {
  echo "$EPOCHREALTIME ${ADVICE_WORDS[*]}" >> "$_blerc_debug_timestamp_logfile"
}
function blerc/debug/timestamp/wrap.advice {
  echo "$EPOCHREALTIME ${ADVICE_WORDS[0]} start" >> "$_blerc_debug_timestamp_logfile"
  ble/function#advice/do
  echo "$EPOCHREALTIME ${ADVICE_WORDS[0]} end" >> "$_blerc_debug_timestamp_logfile"
}
function blerc/debug/timestamp/complete.loadhook {
  # ble/function#advice \
  #   before ble-decode/.hook \
  #   blerc/debug/timestamp/args.advice
  # ble/function#advice \
  #   around ble/complete/progcomp/.compgen-helper-prog \
  #   blerc/debug/timestamp/wrap.advice
  # ble/function#advice \
  #   around ble/complete/progcomp/.compgen-helper-func \
  #   blerc/debug/timestamp/wrap.advice
  ble/function#advice \
    around _minimal \
    blerc/debug/timestamp/wrap.advice
  ble/function#advice \
    around _init_completion \
    blerc/debug/timestamp/wrap.advice
  ble/function#advice \
    around _filedir \
    blerc/debug/timestamp/wrap.advice
}
# ble/function#advice \
#   around ble/builtin/history/option:s \
#   blerc/debug/timestamp/wrap.advice
#blehook/eval-after-load complete blerc/debug/timestamp/complete.loadhook

#------------------------------------------------------------------------------

function blerc/vim-airline.hook {
  bleopt vim_airline_left_sep='▶'
  bleopt vim_airline_left_alt_sep='>'
  bleopt vim_airline_right_sep='◀'
  bleopt vim_airline_right_alt_sep='<'
  bleopt vim_airline_symbol_branch='#'

  # # themes/landscape.vim (itchyny/landscape.vim)
  # ble/color/setface vim_airline_x             fg=250,bg=240      # fg=#bcbcbc,bg=#585858
  # ble/color/setface vim_airline_y             fg=236,bg=245      # fg=#303030,bg=#8a8a8a
  # ble/color/setface vim_airline_z             fg=236,bg=252      # fg=#303030,bg=#d0d0d0
  # ble/color/setface vim_airline_a_normal      fg=21,bg=231,bold  # fg=#0000ff,bg=#ffffff
  # ble/color/setface vim_airline_b_normal      fg=231,bg=21       # fg=#ffffff,bg=#0000ff
  # ble/color/setface vim_airline_c_normal      fg=231,bg=236      # fg=#ffffff,bg=#303030
  # ble/color/setface vim_airline_x_normal      ref:vim_airline_x
  # ble/color/setface vim_airline_y_normal      ref:vim_airline_y
  # ble/color/setface vim_airline_z_normal      ref:vim_airline_z
  # ble/color/setface vim_airline_a_insert      fg=22,bg=231,bold  # fg=#005f00,bg=#ffffff
  # ble/color/setface vim_airline_b_insert      fg=231,bg=22       # fg=#ffffff,bg=#005f00
  # ble/color/setface vim_airline_c_insert      fg=231,bg=236      # fg=#ffffff,bg=#303030
  # ble/color/setface vim_airline_x_insert      ref:vim_airline_x
  # ble/color/setface vim_airline_y_insert      ref:vim_airline_y
  # ble/color/setface vim_airline_z_insert      ref:vim_airline_z
  # ble/color/setface vim_airline_a_visual      fg=57,bg=231,bold  # fg=#5f00ff,bg=#ffffff
  # ble/color/setface vim_airline_b_visual      fg=231,bg=57       # fg=#ffffff,bg=#5f00ff
  # ble/color/setface vim_airline_c_visual      fg=231,bg=236      # fg=#ffffff,bg=#303030
  # ble/color/setface vim_airline_x_visual      ref:vim_airline_x
  # ble/color/setface vim_airline_y_visual      ref:vim_airline_y
  # ble/color/setface vim_airline_z_visual      ref:vim_airline_z
  # ble/color/setface vim_airline_a_replace     fg=124,bg=231,bold # fg=#af0000,bg=#ffffff
  # ble/color/setface vim_airline_b_replace     fg=231,bg=124      # fg=#ffffff,bg=#af0000
  # ble/color/setface vim_airline_c_replace     fg=231,bg=236      # fg=#ffffff,bg=#303030
  # ble/color/setface vim_airline_x_replace     ref:vim_airline_x
  # ble/color/setface vim_airline_y_replace     ref:vim_airline_y
  # ble/color/setface vim_airline_z_replace     ref:vim_airline_z
  # ble/color/setface vim_airline_a_inactive    fg=236,bg=233      # fg=#303030,bg=#121212
  # ble/color/setface vim_airline_b_inactive    ref:vim_airline_a_inactive
  # ble/color/setface vim_airline_c_inactive    ref:vim_airline_a_inactive
  # ble/color/setface vim_airline_z_inactive    ref:vim_airline_a_inactive
  # ble/color/setface vim_airline_y_inactive    ref:vim_airline_a_inactive
  # ble/color/setface vim_airline_x_inactive    ref:vim_airline_a_inactive
}
#ble/util/import/eval-after-load lib/vim-airline 'blerc/vim-airline.hook'

#------------------------------------------------------------------------------
#
# Settings for rps1
#

function ble/prompt/backslash:blerc/rps1 {
  ((COLUMNS>=120)) || return 0

  # [[ $_ble_term_TERM == contra:* ]] &&
  #   ble/prompt/print $'\e[1l\e[6h\eV'

  # ATA
  if [[ $_ble_exec_time_ata ]] && ((_ble_exec_time_LINENO==_ble_edit_LINENO)); then
    ble/prompt/print $'\e[38:5:69;3m'
    ble/prompt/backslash:contrib/elapsed
    ble/prompt/print $'\e[m '
  fi

  # Time
  ble/prompt/print $'\e[90m'
  ble/prompt/process-prompt-string '\D{%F %T %Z}'
  ble/prompt/print $'\e[m '

  # git info
  ble/prompt/backslash:contrib/git-info ||
    ble/prompt/process-prompt-string '\w'

  # [[ $_ble_term_TERM == contra:* ]] &&
  #   ble/prompt/print $'\eW'

  return 0
}

ble-import contrib/prompt-git
ble-import contrib/prompt-elapsed
bleopt prompt_rps1='\q{blerc/rps1}'
#bleopt prompt_rps1_transient=1

ble-import -d contrib/config/execmark
bleopt exec_elapsed_enabled='sys+usr>=1000'

#------------------------------------------------------------------------------
#
# (devel) tests
#
#------------------------------------------------------------------------------

[[ -f ~/bashrc.forms.sh ]] &&
  source ~/bashrc.forms.sh

if [[ ${HOSTNAME%%.*} == chatoyancy ]]; then
  :

  # # For debug (initialize-faces)
  # ble-face syntax_default=none

  # bleopt prompt_status_align=justify
  # source ~/.mwg/src/ble.sh/memo/D1488.vim-mode-in-status.bash

  #bleopt input_encoding=UTF-8
  #bleopt input_encoding=C

  # 2020-12-31
  # _ble_contrib_fzf_base=~/prog/ext-github/junegunn.fzf
  # ble-import -d contrib/fzf-initialize
  # ble-import -d contrib/fzf-completion
  # ble-import -d ~/.mwg/src/ble.sh/ext/urbainvaes.fzf-marks/fzf-marks.plugin.bash

  # 2020-09-15 ble.sh debug
  # ble/function#advice around _minimal '
  #   ble/debug/print-variables "${!COMP_@}" 2>/dev/pts/14
  #   ble/function#advice/do
  #   ble/debug/print-variables COMPREPLY 2>/dev/pts/14'

  # 2020-08-22
  #bleopt complete_auto_menu=1000
  #bleopt complete_menu_maxlines=10

  # 2020-05-20
  #ble-import contrib/prompt-vim-mode
  #ble-import contrib/prompt-git
  # PS1='\q{contrib/vim-mode}'

  # 2020-02-09 fzfテスト
  # ((_ble_bash)) && ble-import -d ~/.fzf.bash
  # _ble_contrib_fzf_base=~/prog/ext-github/junegunn.fzf
  # ble-import -d contrib/fzf-completion
  # ble-import -d contrib/fzf-key-bindings

  # 2019-02-09 結合テスト
  #source ~/.bashrc.bash-it
  #source ~/.bashrc.oh-my-bash

  # 2019-01-27 complete -I のテスト
  # if ((_ble_bash>=50000)); then
  #   _comp_initial_word() {
  #     echo "f: args=($*)" >>/dev/pts/16
  #     local globchars='*?['
  #     shopt -q extglob && globchars+='!@+'
  #     local head=${3%%["$globchars"]*}
  #     COMPREPLY=($(compgen -c -X '!'"$3*" -- "$head"))
  #   }
  #   complete -I -F _comp_initial_word -o bashdefault
  # fi

  # 減色の確認
  # bleopt term_index_colors=0
  # _ble_term_colors=8

  # core-complete.sh 遅延ロードテスト
  # ble/array#push _ble_complete_load_hook bashrc/complete-load-hook
  # function bashrc/complete-load-hook {
  #   ble-color-setface auto_complete fg=246
  #   ble-bind -m auto_complete -f 'C-x C-i' 'auto_complete/insert'
  # }

  # ble/util/idle の確認
  # if ble/is-function ble/util/idle.push; then
  #   function bashrc/task/show-time {
  #     ble/util/idle.sleep 1000
  #     local ret; printf -v ret '%(%F %T %Z)T'
  #     ble-edit/info/immediate-show text "$ret"
  #   }
  #   ble/util/idle.push-background 'bashrc/task/show-time'
  # fi

  # bleopt edit_vbell=1
  # shopt -s failglob
  # shopt -s checkjobs
  # ble-color-setface auto_complete fg=246
  # bleopt filename_ls_colors="$LS_COLORS"
fi
