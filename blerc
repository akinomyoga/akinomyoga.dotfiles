# blerc -*- mode: sh; mode: sh-bash -*-

# Settings for ble.sh (https://github.com/akinomyoga/ble.sh)

#bleopt_suppress_bash_output=

set -o vi
bleopt char_width_mode=emacs
bleopt char_width_mode=auto
bleopt indent_offset=2
bleopt decode_isolated_esc=esc
bleopt complete_auto_delay=1
bleopt internal_stackdump_enabled=1

((_ble_bash>=40100)) && bind 'set skip-completed-text on'
((_ble_bash>=40300)) && bind 'set colored-stats on'
((_ble_bash>=40400)) && bind 'set colored-completion-prefix on'

bleopt vbell_align=right
bleopt edit_vbell=1

bleopt menu_linewise_prefix=$' \e[1;32m>\e[m '

bleopt decode_error_cseq_vbell=1 # for debugging

#ble-color-setface auto_complete fg=246

#bleopt filename_ls_colors="$LS_COLORS"

ble/array#push _ble_keymap_vi_load_hook blerc/vim-load-hook
function blerc/vim-load-hook {
  bind 'set keyseq-timeout 1'

  case $TERM in
  (xterm*)
    _ble_term_Ss=$'\e[@1 q' ;;
  esac
  bleopt keymap_vi_nmap_cursor=2
  bleopt keymap_vi_imap_cursor=5
  bleopt keymap_vi_omap_cursor=4
  bleopt keymap_vi_xmap_cursor=2
  bleopt keymap_vi_cmap_cursor=0

  source "$_ble_base/lib/vim-surround.sh"
  bleopt vim_surround_q:=\'
  bleopt vim_surround_Q:=\"

  # C-w
  ble-bind -f 'C-w'      'kill-region-or kill-uword'
  ble-bind -m vi_cmap -f 'C-w' 'kill-region-or kill-uword'

  ble-decode/keymap:vi_imap/define-meta-bindings

  bleopt keymap_vi_imap_undo=more

  source "$_ble_base"/keymap/vi_test.sh
}

ble/array#push _ble_complete_load_hook blerc/complete-load-hook
function blerc/complete-load-hook {
  [[ $OSTYPE == cygwin ]] &&
    ble-sabbrev '\I'='| iconv -c -f cp932 -t utf-8'

  # sabbrev \branch
  function blerc/sabbrev-git-branch {
    ble/util/assign-array COMPREPLY "git branch | sed 's/^\*\{0,1\}[[:space:]]*//'" 2>/dev/null
  }
  ble-sabbrev -m '\branch'=blerc/sabbrev-git-branch

  # sabbrev \date
  ble-sabbrev -m '\date'='ble/util/assign COMPREPLY "date +%F"'

  # sabbrev \commit
  ble/color/defface blerc_git_commit_id fg=navy
  ble/complete/action/inherit-from blerc_git_commit_id word
  function ble/complete/action:blerc_git_commit_id/init-menu-item {
    ble/color/face2g blerc_git_commit_id
  }
  function blerc/sabbrev-git-commit {
    bleopt sabbrev_menu_style=desc-raw
    bleopt sabbrev_menu_opts=enter_menu

    local format=$'%h \e[1;32m(%ar)\e[m %s - \e[4m%an\e[m\e[1;33m%d\e[m'
    local arr; ble/util/assign-array arr 'git log --pretty=format:"$format"' &>/dev/null
    local line hash subject
    for line in "${arr[@]}"; do
      builtin read hash subject <<< "$line"
      ble/complete/cand/yield blerc_git_commit_id "$hash" "$subject"
    done
  }
  ble-sabbrev -m '\commit'='blerc/sabbrev-git-commit'
}

#------------------------------------------------------------------------------
#
# Settings for rps1
#

_blerc_prompt_git_vars=(git_base)

## 関数 blerc/prompt/git/initialize
function blerc/prompt/git/initialize {
  type git &>/dev/null || return 1
  # [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) ]]
  local path=$PWD
  while
    if [[ -f $path/.git/HEAD ]]; then
      git_base=$path
      return 0
    fi
    [[ $path == */* ]]
  do path=${path%/*}; done
  return 1
}
## 関数 blerc/prompt/git/get-head-information
##   @var[out] hash branch
function blerc/prompt/git/get-head-information {
  branch= hash=

  local head_file=$git_base/.git/HEAD
  [[ -s $head_file ]] || return
  local content; ble/util/mapfile content < "$head_file"

  if [[ $content == *'ref: refs/heads/'* ]]; then
    branch=${content#*refs/heads/}

    local branch_file=$git_base/.git/refs/heads/$branch
    [[ -s $branch_file ]] || return
    local content; ble/util/mapfile content < "$branch_file"
  fi

  [[ ! ${content//[0-9a-fA-F]} ]] && hash=$content
  return 0
}
## 関数 blerc/prompt/git/get-tag-name hash
##   @var[out] tag
function blerc/prompt/git/get-tag-name {
  # ble/util/assign-array tag 'git describe --tags --exact-match 2>/dev/null'
  tag=
  local hash=$1; [[ $hash ]] || return 1

  local file tagsdir=$git_base/.git/refs/tags hash1
  local files ret; ble/util/eval-pathname-expansion '"$tagsdir"/*'; files=("${ret[@]}")
  for file in "${files[@]}"; do
    local tag1=${file#$tagsdir/}
    [[ -s $file ]] || continue
    ble/util/mapfile hash1 < "$file"
    if [[ $hash1 == "$hash" ]]; then
      tag=$tag1
      return
    fi
  done
}

function blerc/prompt/git/describe-head {
  ret=

  local hash branch
  blerc/prompt/git/get-head-information
  if [[ $branch ]]; then
    local sgr=$'\e[1;34m' sgr0=$'\e[m'
    ret=$sgr$branch$sgr0
    [[ $hash ]] && ret="$ret (${hash::7})"
    return
  fi

  local DETACHED=$'\e[91mDETACHED\e[m'

  local tag
  blerc/prompt/git/get-tag-name "$hash"
  if [[ $ret ]]; then
    local sgr=$'\e[1;32m' sgr0=$'\e[m'
    ret=$sgr$tag$sgr0
    [[ $hash ]] && ret="$ret ${hash::7}"
    ret="$DETACHED ($ret)"
    return
  fi

  # "master~23" 等の分かりにくい説明なのでこれは使わない
  # ble/util/assign-array ret 'git describe --contains --all 2>/dev/null'
  # if [[ $ret ]]; then
  #   local sgr=$'\e[32m' sgr0=$'\e[m'
  #   ret="($DETACHED at $sgr$ret$sgr0)"
  #   return
  # fi

  if [[ $hash ]]; then
    ret="$DETACHED (${hash::7})"
    return
  fi

  ret=$'\e[91mUNKNOWN\e[m'
}
function ble-edit/prompt/backslash:X {
  ((COLUMNS>=120)) || return 0

  local "${_blerc_prompt_git_vars[@]}"
  if blerc/prompt/git/initialize; then
    local sgr=$'\e[1m' sgr0=$'\e[m'
    local name=$sgr${git_base##*?/}$sgr0
    local ret; blerc/prompt/git/describe-head; local branch=$ret
    ble-edit/prompt/print "$name $branch"
    [[ $PWD == "$git_base"/?* ]] &&
      ble-edit/prompt/print " /${PWD#$git_base/}"
  else
    ble-edit/prompt/process-prompt-string '\w'
  fi

  return 0
}
bleopt rps1='\X'
#bleopt rps1_transient=1

#------------------------------------------------------------------------------
#
# (devel) tests
#
#------------------------------------------------------------------------------

if [[ ${HOSTNAME%%.*} == padparadscha ]]; then
  bleopt edit_vbell=1
  # shopt -s failglob
  # shopt -s checkjobs

  # ble/util/idle の確認
  # if ble/is-function ble/util/idle.push; then
  #   function bashrc/task/show-time {
  #     ble/util/idle.sleep 1000
  #     local ret; printf -v ret '%(%F %T %Z)T'
  #     ble-edit/info/immediate-show text "$ret"
  #   }
  #   ble/util/idle.push-background 'bashrc/task/show-time'
  # fi

  # core-complete.sh 遅延ロードテスト
  # ble/array#push _ble_complete_load_hook bashrc/complete-load-hook
  # function bashrc/complete-load-hook {
  #   ble-color-setface auto_complete fg=246
  #   ble-bind -m auto_complete -f 'C-x C-i' 'auto_complete/insert'
  # }

  # 減色の確認
  # bleopt term_index_colors=0
  # _ble_term_colors=8

  # 2019-01-27 complete -I のテスト
  # if ((_ble_bash>=50000)); then
  #   _comp_initial_word() {
  #     echo "f: args=($*)" >>/dev/pts/16
  #     local globchars='*?['
  #     shopt -q extglob && globchars+='!@+'
  #     local head=${3%%["$globchars"]*}
  #     COMPREPLY=($(compgen -c -X '!'"$3*" -- "$head"))
  #   }
  #   complete -I -F _comp_initial_word -o bashdefault
  # fi

  # 2019-02-09 結合テスト
  #source ~/.bashrc.bash-it
  #source ~/.bashrc.oh-my-bash
fi
